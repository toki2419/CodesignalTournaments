Consider two following representations of a non-negative integer:

A simple decimal integer, constructed of a non-empty sequence of digits from 0 to 9;
An integer with at least one digit in a base from 2 to 16 (inclusive), enclosed between # characters, and preceded by the base, which can only be a number between 2 and 16 in the first representation. For digits from 10 to 15 characters a, b, ..., f and A, B, ..., F are used.
Additionally, both representations may contain underscore (_) characters; they are used only as separators for improving legibility of numbers and can be ignored while processing a number.

Your task is to determine whether the given string is a valid integer representation.

Note: this is how integer numbers are represented in the programming language Ada.

Example

For line = "123_456_789", the output should be
adaNumber(line) = true;
For line = "16#123abc#", the output should be
adaNumber(line) = true;
For line = "10#123abc#", the output should be
adaNumber(line) = false;
For line = "10#10#123ABC#", the output should be
adaNumber(line) = false;
For line = "10#0#", the output should be
adaNumber(line) = true;
For line = "10##", the output should be
adaNumber(line) = false.

===================================================================

bool adaNumber(std::string line) {
    bool bound1 = false, bound2 = false;
    int len = 0, base = 0;
    char numbers[50];
    char limits[] = {' ', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    bool all_Underscore = true;
    for (char c : line){
        if (c != '_') 
            all_Underscore = false; break;
    }
    if(all_Underscore) return false;
    for (char c : line)
    {
        if (c == '#') {
            if (len < 1)
                return false;
            if (bound1 && bound2)
                return false;
            numbers[len] = '\0';
            if (bound1) {
                for (int i = 0; i < strlen(numbers); ++i)
                    if (numbers[i] > limits[base])
                        return false;
                bound2 = true;
            }
            else {
                for (int i = 0; i < strlen(numbers); ++i) {
                    if (numbers[i] < '0' || numbers[i] > '9')
                        return false;
                    base = 10 * base + numbers[i] - '0';
                }
                if (base < 2 || base > 16)
                    return false;
                bound1 = true;
            }
            len = 0;
        }
        else if (('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F')) {
            if (bound1 && bound2)
                return false;
            numbers[len++] = std::tolower(c);
        }
        else if (c != '_')
            return false;
    }
        
    if (!bound1) {
        numbers[len] = '\0';
        for (int i = 0; i < strlen(numbers); ++i)
            if (numbers[i] < '0' || numbers[i] > '9')
                return false;
        return true;
    }
    return bound2;
}