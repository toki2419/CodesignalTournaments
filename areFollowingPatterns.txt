Given an array strings, determine whether it follows the sequence given in the patterns array. In other words, there should be no i and j for which strings[i] = strings[j] and patterns[i] ≠ patterns[j] or for which strings[i] ≠ strings[j] and patterns[i] = patterns[j].

Example

For strings = ["cat", "dog", "dog"] and patterns = ["a", "b", "b"], the output should be
areFollowingPatterns(strings, patterns) = true;
For strings = ["cat", "dog", "doggy"] and patterns = ["a", "b", "b"], the output should be
areFollowingPatterns(strings, patterns) = false.

------------------------------------------------

bool areFollowingPatterns(std::vector<std::string> strings, std::vector<std::string> patterns) {
    std::map<string, string> cache1;
    std::map<string, string> cache2;
    for (int i = 0; i < patterns.size(); i++) {
        string item = strings[i], pattern = patterns[i];
        if (cache1.find(pattern) == cache1.end()) {
            cache1[pattern] = item;
        }
        if (cache2.find(item) == cache2.end()) {
            cache2[item] = pattern;
        }
        if (cache1[pattern] != item) {
            return false;
        }
        if (cache2[item] != pattern) {
            return false;
        }
    }
    return true;
}