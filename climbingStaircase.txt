You need to climb a staircase that has n steps, and you decide to get some extra exercise by jumping up the steps. You can cover at most k steps in a single jump. Return all the possible sequences of jumps that you could take to climb the staircase, sorted.

Example

For n = 4 and k = 2, the output should be

climbingStaircase(n, k) =
[[1, 1, 1, 1],
 [1, 1, 2],
 [1, 2, 1],
 [2, 1, 1],
 [2, 2]]
There are 4 steps in the staircase, and you can jump up 2 or fewer steps at a time. There are 5 potential sequences in which you jump up the stairs either 2 or 1 at a time.

===================================================================

#define VV vector<vector<int>>
void backTrack(int n, int k, vector<int> r, VV &ans){
    if (n==0)
        ans.push_back(r);
    for(int i = 1; i <= k; i++){
        if(n-i>=0){
            r.push_back(i);
            backTrack(n-i, k, r, ans);
            r.pop_back();
        }
    }
}

VV climbingStaircase(int n, int k) {
    VV ans;
    vector<int> r;
    backTrack(n, k, r, ans);
    return ans;
}