Binary heaps are commonly implemented with an array.

Let n be the number of elements in the heap. The heap nodes have indices from 0 to n - 1, the root has index 0. For every valid i the following is true:

if 2i + 1 < n then the left son of the ith node has an index 2i + 1. Otherwise it doesn't exist.
if 2i + 2 < n then the right son of the ith node has an index 2i + 2. Otherwise it doesn't exist.
if the ith node has a parent, its index is floor((i - 1) / 2).
Given an array representing a heap, return a predicate defined for it.

Example

For heap = [1, 3, 2, 5, 3, 2], the output should be
findHeapPredicate(heap) = "<=".

------------------------------------------------

std::string findHeapPredicate(std::vector<int> heap) {

  bool allGreater = true, allLess = true;
  for (int i = 0; 2 * i + 1 < (int) heap.size(); i++) {
    int sign1 = heap[i] - heap[2 * i + 1];
    int sign2 = 0;
    if (2 * i + 2 < (int) heap.size()) {
      sign2 = heap[i] - heap[2 * i + 2];
    }
    allGreater &= sign1 >= 0 && sign2 >= 0;
    allLess &= sign1 <= 0 && sign2 <= 0;
  }

  if (allGreater && allLess) {
    return "?";
  } else if (allGreater) {
    return ">=";
  } else if (allLess) {
    return "<=";
  } else {
    return "!";
  }
}