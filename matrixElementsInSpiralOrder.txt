Given a rectangular matrix, return all of the elements of the matrix in spiral order.

Example

For

matrix =
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
the output should be
matrixElementsInSpiralOrder(matrix) = [1, 2, 3, 4, 5, 6, 7, 8, 9].

===============================================================================

std::vector<int> matrixElementsInSpiralOrder(std::vector<std::vector<int>> a) {
    vector<int> re;
    if(a.size()==0) return re;
    int i, k = 0, l = 0; 
    int m = a.size(), n = a[0].size();
  
    /*  k - starting row index  
        m - ending row index  
        l - starting column index  
        n - ending column index  
        i - iterator  */
  
    while (k < m && l < n) { 
        /* Print the first row from 
               the remaining rows */
        for (i = l; i < n; ++i) 
            re.push_back(a[k][i]);
        k++; 
  
        /* Print the last column  
         from the remaining columns */
        for (i = k; i < m; ++i) 
            re.push_back(a[i][n - 1]);
        n--; 
  
        /* Print the last row from  
                the remaining rows */
        if (k < m) { 
            for (i = n - 1; i >= l; --i) 
                re.push_back(a[m - 1][i]); 
            m--; 
        } 
  
        /* Print the first column from 
                   the remaining columns */
        if (l < n) { 
            for (i = m - 1; i >= k; --i) 
                re.push_back(a[i][l]); 
            l++; 
        } 
    } 
    return re;
}

