You have an array of integers a. Find and return the maximum possible sum of values in some subsequence b with the following property: There is no pair of elements in b for which their indices in a are adjacent.

Example

For a = [6, 13, 100, 100, 4], the output should be
maxSumWithoutAdjacents(a) = 113.

The subsequence with the maximum possible sum of values is {a1, a3} = {13, 100}.

Input/Output

[execution time limit] 0.5 seconds (cpp)

[input] array.integer a

Guaranteed constraints:
1 ≤ a.length ≤ 2 · 105,
0 ≤ a[i] ≤ 104.

[output] integer

The maximum possible sum, determined as described above.

--------------------------------------------------------

int maxSumWithoutAdjacents(std::vector<int> a) {
    int s = a[0], m = 0, mm = 0; 
    for (int i = 1; i < a.size(); i++) 
    { 
        mm = s > m ? s: m; 
        s = m + a[i]; 
        m = mm; 
    } 
    return s > m ? s : m;
}