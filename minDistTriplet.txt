You have three sorted arrays of integers: a, b, and c. Let's define distance(x, y, z) as |x - y| + |y - z| + |z - x|. Find and return the minimum possible distance(x, y, z), such that x is an element of a, y is an element of b, and z is an element of c.

Example

For a = [4, 30], b = [6, 12, 20], and c = [10, 37], the output should be
minDistTriplet(a, b, c) = 12.

===================================================================

int minDistTriplet(std::vector<int> a, std::vector<int> b, std::vector<int> c) {
    int diff = INT_MAX, x = 0, y = 0, z = 0;
    int i = 0, j = 0, k = 0; 
    while(i < a.size() && j < b.size() && k < c.size()){
        int mini = min(a[i], min(b[j], c[k])); 
        int maxi = max(a[i], max(b[j], c[k])); 
        if (maxi-mini < diff) 
        { 
            x = a[i], y = b[j], z = c[k];
            diff = maxi-mini; 
        } 
        if (diff == 0) break; 
        if (a[i] == mini) i++; 
        else if (b[j] == mini) j++; 
        else k++; 
    }
    return abs(x-y)+abs(y-z)+abs(z-x);
}
