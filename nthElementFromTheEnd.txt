Given a singly linked list l and an integer n, find the nth element from the end in l. If there are fewer than n elements in l, return -1.

Example

For l = [1, 2, 3, 4] and n = 3, the output should be
nthElementFromTheEnd(l, n) = 2;
For l = [10, 4, 2, 5, 8, 3, 2, 4] and n = 9, the output should be
nthElementFromTheEnd(l, n) = -1.

===================================================================

// Singly-linked lists are already defined with this interface:
// template<typename T>
// struct ListNode {
//   ListNode(const T &v) : value(v), next(nullptr) {}
//   T value;
//   ListNode *next;
// };
//
int nthElementFromTheEnd(ListNode<int> * l, int n) {
    vector<int> v;
    while(l){
        v.push_back(l->value);
        l=l->next;
    }
    if(n>v.size()) return -1;
    return v[v.size()-n];
}

